#include<iostream>

using namespace std;
// Kth node from end


//Approach name "two pointer"
/*
. Intialise the slow and fast ptr form the head of the linked list
. Then move fast ptr kth step from the head
. Then start moving both slow and fast ptr until fast reaches at NULL.
. When fast is at NULL then out slow ptr is at kth node form last step
. Then simply return slow ptr.
*/
class node {
public:

	int data;
	node* next;

	node(int data) {
		this->data = data;
		this->next = NULL;
	}

};

void insertAtHead(node*& head, int data) {
	node* n = new node(data);
	n->next = head; 
	head = n;
}


void printLinkedList(node* head) {
	while(head) { // head != NULL
		cout << head->data;
		head = head->next;
		if(head) { // head != NULL
			cout << "->";
		}
	}
	cout << endl;
}

node* kthNodeFromEnd(node* head, int k) {
	if(head == NULL) {
		// linked list is empty
		return NULL;
	}

	node* fast = head;
	while(k-- && fast != NULL) {
        // "k--" (we move the fast prt to kth step) 
        //fast != NULL (to avoid to get exceeds the length of the linked list)
		fast = fast->next;
	}

	if(fast == NULL) {
		// to handle the case when k exceed length of the linked list
		return NULL;
	}

	node* slow = head;
	while(fast != NULL) {
		slow = slow->next;
		fast = fast->next;
	}

	return slow;

}

int main() {

	node* head = NULL;

	insertAtHead(head, 70);
	insertAtHead(head, 60);
	insertAtHead(head, 50);
	insertAtHead(head, 40);
	insertAtHead(head, 30);
	insertAtHead(head, 20);
	insertAtHead(head, 10);

	printLinkedList(head);

	int k = 3;

	node* kthNode = kthNodeFromEnd(head, k);

// kth node may be NULL to check this we use if condition then we print
	if(kthNode != NULL) {
		cout << kthNode->data << endl;
	} else {
		cout << "Either linked list is empty or k exceeds length of the linked list" << endl;
	}


	return 0;
}
