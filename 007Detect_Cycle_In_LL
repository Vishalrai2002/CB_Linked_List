#include<iostream>

using namespace std;
// Detect Cycle

/*
. If there is a cycle then slow and fast ptr are definetly meet if not cycle then they do not meet each other.
 while moving slow and fast ptr one step forward.
*/
class node {
public:

	int data;
	node* next;

	node(int data) {
		this->data = data;
		this->next = NULL;
	}

};

void insertAtHead(node*& head, int data) {
	node* n = new node(data);
	n->next = head; 
	head = n;
}

void printLinkedList(node* head) {
	while(head) { // head != NULL
		cout << head->data;
		head = head->next;
		if(head) { // head != NULL
			cout << "->";
		}
	}
	cout << endl;
}

bool checkCycle(node* head) {
	node* slow = head;
	node* fast = head;

	while(fast != NULL && fast->next != NULL) {
		slow = slow->next;
		fast = fast->next->next;
		if(slow == fast) {
			return true;
		}
	}

	return false;	

}

void removeCycle(node* head) {

	node* slow = head;
	node* fast = head;

	while(fast && fast->next) {
		slow = slow->next;
		fast = fast->next->next;
		if(slow == fast) {
			// slow and fast have reached the meeting point.
			break;
		}
	}

	node* prev = head;
	while(prev->next != fast) {  // fast also use slow here because both are equlal at meeting points
		prev = prev->next;
	}

	fast = head;
	while(slow != fast) {
		prev = prev->next;
		slow = slow->next;
		fast = fast->next;
	}
// after this prev is at tail 
	prev->next = NULL;


}

int main() {


// hard code 
	node* head = new node(10);
	head->next = new node(20);
	head->next->next = new node(30);
	head->next->next->next = new node(40);
	head->next->next->next->next = new node(50);
	head->next->next->next->next->next = new node(60);
	head->next->next->next->next->next->next = new node(70);
	head->next->next->next->next->next->next->next = new node(80);
	head->next->next->next->next->next->next->next->next = head->next->next->next; // 80 ke next me 40 dal diya hai


// if we print this linked list you can trap in infinite loop because printlinkedlist function is run till it finds the NULL 
// but in this case there is not NULL so you can trapped .
	checkCycle(head) ? cout << "Cycle is present" << endl :
	                   cout << "Cycle is not present" << endl;


	if(checkCycle(head)) {
		removeCycle(head);
		printLinkedList(head);
	}
 	
	return 0;
}
